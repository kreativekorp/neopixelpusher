#include <Arduino.h>
#include <avr/pgmspace.h>
#include "npp_blink_patterns.h"

static const uint8_t npp_blink_pattern_levels[] PROGMEM = {
	255, 255,   0, 255, 255, 255,   0,   0, 255, 255,   0,   0, 255, 255,   0,   0,
	255, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 255,
	  0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 255,
	  0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 255,
	  0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0, 255,
	  0, 255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0, 255, 255, 255, 255,
	  0, 255,   0, 255,   0,   0,   0,   0, 255,   0, 255,   0, 255, 255, 255, 255,
	  0, 255,   0, 255,   0,   0,   0,   0, 255,   0, 255,   0, 255, 255,   0,   0,
	255, 255,   0,   0, 255, 255,   0,   0, 255, 255,   0, 255,   0, 255,   0,   0,
	  0,   0,   0,   0,   0,   0,   0, 255,   0, 255,   0, 255,   0, 255,   0,   0,
	  0,   0,   0,   0,   0,   0,   0, 255,   0, 255,   0, 255, 255, 255, 255,   0,
	255,   0, 255,   0,   0,   0,   0, 255,   0, 255,   0, 255, 255, 255, 255,   0,
	255,   0, 255,   0,   0,   0,   0, 255,   0, 255,   0,   0,   0, 255, 255,   0,
	  0, 255, 255,   0,   0, 255, 255,   0,   0, 255, 255,   0, 255,   0, 255,   0,
	255,   0, 255,   0,   0,   0,   0,   0,   0,   0,   0, 255,   0,   0, 255, 255,
	  0,   0, 255, 255,   0,   0, 255, 255,   0,   0, 255,   0,   0,   0,   0, 255,
	  0, 255,   0, 255,   0, 255,   0,   0,   0,   0,   0,  51, 102, 153, 204, 255,
	255, 255, 204, 153, 102,  51,   0,  51, 102, 153, 204, 255, 255, 255, 204, 255,
	255, 255, 255, 255, 255, 255, 238, 221, 204, 187, 170, 153, 136, 119, 102,  85,
	 68,  51,  34,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,  17,  34,  51,  68,  85, 102, 119,
	136, 153, 170, 187, 204, 221, 238, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 238, 221, 204, 187, 170, 153, 136, 119, 102,  85,  68,
	 51,  34,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,  34,  51,
	 68,  85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 238, 221, 204, 187, 170, 153, 136,
	119, 102,  85,  68,  51,  34,  17, 255, 255,   0,   0,   0, 255,   0,   0,   0,
	255, 255, 255,   0,   0,   0,   0,   0, 255, 255, 255,   0,   0,   0,   0
};

static const struct {
	uint8_t ms;
	uint8_t fc;
	uint8_t cc;
	int ch0;
	int ch1;
	int ch2;
	int ch3;
} npp_blink_patterns[NPP_BLINK_PATTERNS] PROGMEM = {
	{ 200,  2, 2,   1,   2,  -1,  -1 }, /* Chase 1/2 */
	{ 160,  3, 3,   5,  28,   6,  -1 }, /* Chase 1/3 */
	{ 120,  4, 4,  17,  34,  27,  26 }, /* Chase 1/4 */
	{ 160,  3, 3,   1,   0,   2,  -1 }, /* Chase 2/3 */
	{ 120,  4, 4,   5,   4,   7,   6 }, /* Chase 2/4 */
	{ 120,  4, 4,   1,   0,   3,   2 }, /* Chase 3/4 */
	{ 100, 63, 3, 329, 308, 287,  -1 }, /* Slo Glo 3 */
	{ 100, 84, 4, 329, 308, 371, 350 }, /* Slo Glo 4 */
	{  60, 12, 3, 266, 270, 274,  -1 }, /*  Waves 3  */
	{  60, 12, 4, 266, 269, 272, 275 }, /*  Waves 4  */
	{  80, 16, 4,  25,  20,  33,  28 }, /* TwFlash A */
	{  80, 16, 4,  25,  20,  92,  92 }, /* TwFlash B */
	{  80, 64, 4,  25,  20, 139,  60 }, /* TwFlash C */
	{  80, 32, 4, 235,   4, 123, 203 }, /* ChsgFlash */
	{ 160,  6, 3, 455,   2,  89,  -1 }, /*  Walk  3  */
	{ 120,  8, 4, 465, 463, 461,  87 }, /*  Walk  4  */
	{ 160,  4, 3,  17,  28,  27,  -1 }, /* Oscill8 3 */
	{ 120,  6, 4,  17, 200,  27, 232 }, /* Oscill8 4 */
};

void npp_load_blink_pattern(uint8_t i, uint8_t * ms, uint8_t * frames, uint8_t * channels, uint8_t * ch0, uint8_t * ch1, uint8_t * ch2, uint8_t * ch3) {
	uint8_t fc, cc;
	int q0, q1, q2, q3;
	*ms = pgm_read_byte(&npp_blink_patterns[i].ms);
	*frames = fc = pgm_read_byte(&npp_blink_patterns[i].fc);
	*channels = cc = pgm_read_byte(&npp_blink_patterns[i].cc);
	q0 = pgm_read_word(&npp_blink_patterns[i].ch0);
	q1 = pgm_read_word(&npp_blink_patterns[i].ch1);
	q2 = pgm_read_word(&npp_blink_patterns[i].ch2);
	q3 = pgm_read_word(&npp_blink_patterns[i].ch3);
	for (i = 0; i < fc; i++) {
		if (cc > 0) *ch0++ = pgm_read_byte(&npp_blink_pattern_levels[q0++]);
		if (cc > 1) *ch1++ = pgm_read_byte(&npp_blink_pattern_levels[q1++]);
		if (cc > 2) *ch2++ = pgm_read_byte(&npp_blink_pattern_levels[q2++]);
		if (cc > 3) *ch3++ = pgm_read_byte(&npp_blink_pattern_levels[q3++]);
	}
}
